i=1;j=4
inc.alt.sums[j]
inc.alt.sums[j-1]
31+59
41+26
inc.alt.sums[i]
90-67
int.alt.sums[-1]
2
int.alt.sums[-2]
int.even.sums[-2]
int.even.sums
    inc.alt.sums.1 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int-1)#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + int.list[i]#
    }#
    inc.alt.sums.2[1] = int.list[2]#
    for (i in 2:(num.int-1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + int.list[i+1]#
    }
inc.alt.sums.1
inc.alt.sums.2
    inc.alt.sums.1 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + int.list[i]#
    }#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + int.list[i]#
    }
inc.alt.sums.1
inc.alt.sums.2
working.problem1(int.list)
534-427
534-334
    inc.alt.sums.1 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + int.list[i]#
        add.or.sub = add.or.sub * -1#
    }#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + int.list[i]#
        add.or.sub = add.or.sub * -1#
    }
inc.alt.sums.2
    inc.alt.sums.1 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int)#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
    }#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
    }
inc.alt.sums.2
70+84
int.list
93-23
-14+84
int.list
8 %% 2
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j] - inc.alt.sums.1[i-1]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j] - inc.alt.sums.2[i-1]#
            }#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    return list(max.sum=max.sum, l.index=index.l, u.index=index.u)#
}
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j] - inc.alt.sums.1[i-1]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j] - inc.alt.sums.2[i-1]#
            }#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1(int.list)
working.problem1.v2(int.list)
# Improve on the working case by computing sums from the beginning all at once and then find the max sum#
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                if (i > 0)#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            cat(cur.sum, max.sum)#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            cat(cur.sum, " - ", max.sum, "\n")#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
i.runtime = 0
    inc.alt.sums.1 = vector(mode="numeric", length=num.int+1) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int+1) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
inc.alt.sums.1
inc.alt.sums.2
    inc.alt.sums.1 = vector(mode="numeric", length=(num.int+1)) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=(num.int+1)) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
inc.alt.sums.2
inc.alt.sums.1
    inc.alt.sums.1 = vector(mode="numeric", length=(num.int+1)) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=(num.int+1)) # even#
    inc.alt.sums.1[2] = int.list[2]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i-1])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[3]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i-1])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
inc.alt.sums.1
inc.alt.sums.2
int.list
    inc.alt.sums.1 = vector(mode="numeric", length=(num.int+1)) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=(num.int+1)) # even#
    inc.alt.sums.1[2] = int.list[1]#
    add.or.sub = 1#
    for (i in 3:(num.int+1)) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i-1])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[3] = int.list[2]#
    for (i in 4:(num.int+1)) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i-1])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
inc.alt.sums.2
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }
inc.alt.sums.2
append(0, inc.alt.sums.1)
    inc.alt.sums.1 = append(0, inc.alt.sums.1)#
    inc.alt.sums.2 = append(0, inc.alt.sums.2)
inc.alt.sums.2
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = 1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = 1#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    inc.alt.sums.1 = append(0, inc.alt.sums.1)#
    inc.alt.sums.2 = append(0, inc.alt.sums.2)#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            add.or.sub=1    # can be 1 or -1; always start as addition#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            cat(cur.sum, " - ", max.sum, "\n")#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
41-59+26-53+58-97
inc.alt.sums.2
inc.alt.sums.2[2]
int.list
41-59
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = -1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = -1#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    inc.alt.sums.1 = append(0, inc.alt.sums.1)#
    inc.alt.sums.2 = append(0, inc.alt.sums.2)#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            cat(cur.sum, " - ", max.sum, "\n")#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
working.problem1.v2 = function(int.list) {#
    cat("List X:", int.list, "\n")#
    num.int = length(int.list)#
#
    ## Vars#
    index.l=0#
    index.u=0#
    max.sum=0#
    cur.sum=0#
    i.runtime = 0#
    #
    inc.alt.sums.1 = vector(mode="numeric", length=num.int) # odd#
    inc.alt.sums.2 = vector(mode="numeric", length=num.int) # even#
    inc.alt.sums.1[1] = int.list[1]#
    add.or.sub = -1#
    for (i in 2:num.int) {#
        inc.alt.sums.1[i] = inc.alt.sums.1[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    add.or.sub = -1#
    inc.alt.sums.2[2] = int.list[2]#
    for (i in 3:num.int) {#
        inc.alt.sums.2[i] = inc.alt.sums.2[i-1] + (add.or.sub * int.list[i])#
        add.or.sub = add.or.sub * -1#
        i.runtime = i.runtime + 1#
    }#
    #
    inc.alt.sums.1 = append(0, inc.alt.sums.1)#
    inc.alt.sums.2 = append(0, inc.alt.sums.2)#
    #
    for (i in 1:num.int) {#
        for (j in i:num.int) {#
            cur.sum = 0#
            if (i %% 2) { # odd#
                cur.sum = inc.alt.sums.1[j+1] - inc.alt.sums.1[i]#
            } else { # Even#
                cur.sum = inc.alt.sums.2[j+1] - inc.alt.sums.2[i]#
            }#
            #
            if (cur.sum > max.sum) {#
                index.l = i#
                index.u = j#
                max.sum = cur.sum#
            }#
            #
            i.runtime = i.runtime + 1#
        }#
    }#
#
    cat("Max Sum:", max.sum, "\n")#
    cat(sprintf("for X[%i..%i]", index.l, index.u), "=", int.list[index.l:index.u], "\n")#
    cat(sprintf("...computed in %i for list of length %i", i.runtime, num.int), "\n")#
    #
    #return(list(max.sum=max.sum, l.index=index.l, u.index=index.u))#
}
working.problem1.v2(int.list)
working.problem1.v2(int.list2)
50*49
50*49/2
10:1
?<<-
?"<<-"
vec = c(1,2,3)
t = function() { cat(vec, "\n") }
t()
find_max_sum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    return(vec[max_start:max_end])#
}
working.problem1(int.list)
find_max_sum(int.list)
working.problem1(int.list2)
working.problem1.v2(int.list2)
find_max_sum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
working.problem1.v2(int.list2)
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
working.problem1.v2(int.list2)
find.maxsum(int.list2)
int.list2[6:15]
int.list2[6:16]
sum(int.list2[6:15])
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}
alt.sum(int.list2[6:15])
alt.sum(int.list2[6:48])
alt.sum(int.list2[6:15])
alt.sum(int.list2[6:16])
int.list2[16]
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i", i, tmp_sum), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
find.maxsum(int.list2)
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i", i, tmp_sum, cur_start), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
find.maxsum(int.list2)
vec[22]
int.list2[22]
int.list2[21]
int.list2
int.list2[6:15]
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
find.maxsum(int.list2)
alt.sum(int.list2[6:15]
)
alt.sum(int.list2[6:15])
alt.sum(int.list2[6:16])
alt.sum(int.list2[6:48])
alt.sum(int.list2[16:17])
alt.sum(int.list2[22:48])
alt.sum(int.list2[21:48])
alt.sum(int.list2[23:48])
alt.sum(int.list2[22:48])
alt.sum(int.list2[22:47])
alt.sum(int.list2[22:49])
alt.sum(int.list2[22:50])
alt.sum(int.list2[16:48])
alt.sum(int.list2[14:48])
alt.sum(int.list2[13:48])
alt.sum(int.list2[12:48])
alt.sum(int.list2[11:48])
alt.sum(int.list2[10:48])
alt.sum(int.list2[6:16])
alt.sum(int.list2[6:22])
alt.sum(int.list2[6:21])
alt.sum(int.list2[6:20])
alt.sum(int.list2[6:22])
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}#
#
#
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0)) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
find.maxsum(int.list2)
find.maxsum(int.list)
working.problem1(int.list)
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}#
#
#
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Since alternating sum, need to also consider vec[i+1]#
        # look ahead to sum of vec[i] & vec[i+1]#
        if (i < n)#
            look_ahead_sum = vec[i] - vec[i+1]#
        else#
            look_ahead_sum = tmp_sum#
        #
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        #     as long as sum of vec[1..i] is less than sum of vec[i..i+1]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i] && look_ahead_sum > tmp_sum)) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}
find.maxsum(int.list)
find.maxsum(int.list2)
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}#
#
#
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Since alternating sum, need to also consider vec[i+1]#
        # look ahead to sum of vec[i] & vec[i+1]#
        if (i < n)#
            look_ahead_sum = vec[i] - vec[i+1]#
        else#
            look_ahead_sum = tmp_sum#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        #     as long as sum of vec[1..i] is less than sum of vec[i..i+1]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i] && look_ahead_sum > tmp_sum)) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    return(list(subvec=vec[max_start:max_end], vec=vec, max=max_sum, start=max_start, end=max_end))#
}
find.maxsum(int.list2)
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}#
#
#
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Since alternating sum, need to also consider vec[i+1]#
        # look ahead to sum of vec[i] & vec[i+1]#
        if (i < n)#
            look_ahead_sum = vec[i] - vec[i+1]#
        else#
            look_ahead_sum = tmp_sum#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        #     as long as sum of vec[1..i] is less than sum of vec[i..i+1]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i] && look_ahead_sum > tmp_sum)) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    return(list(vec=vec, max=max_sum, start=max_start, end=max_end, subvec=vec[max_start:max_end], ))#
}
find.maxsum(int.list2)
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        cat(sprintf("i: %i; tmp_sum: %i; cur_start: %i; vec[i]: %i", i, tmp_sum, cur_start, vec[i]), "\n")#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i])) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    cat(sprintf("Max sum vec[%i..%i] = %i", max_start, max_end, max_sum), "\n")#
    #
    return(vec[max_start:max_end])#
}#
#
#
alt.sum <- function(vec) {#
    vec.1 = vec[seq(1,length(vec),by=2)]#
    vec.2 = vec[seq(2,length(vec),by=2)]#
    return(sum(vec.1) - sum(vec.2))#
}#
#
find.maxsum <- function(vec) {#
    n = length(vec)#
    #
    cur_start = 1;#
    cur_sum = 0;#
    #
    max_sum = 0;#
    max_start = 1;#
    max_end = 0;#
    #
    for (i in 1:n) {#
        # Sum of vec[1..i]#
        tmp_sum = cur_sum + (add_or_sub * vec[i])#
        #
        # Since alternating sum, need to also consider vec[i+1]#
        # look ahead to sum of vec[i] & vec[i+1]#
        if (i < n)#
            look_ahead_sum = vec[i] - vec[i+1]#
        else#
            look_ahead_sum = tmp_sum#
        #
        # Compare sum of vec[1..i] to vec[1..i-1]#
        # and restart sum computation at vec[i] if:#
        # 1. *adding* vec[i] to vec[1..i-1] is less than 0#
        # 2. *subtracting* vec[i] from vec[1..i-1] is less than vec[i]#
        #     as long as sum of vec[1..i] is less than sum of vec[i..i+1]#
        if ((tmp_sum < 0) || (add_or_sub == -1 && tmp_sum < vec[i] && look_ahead_sum > tmp_sum)) {#
            # start sum over#
            cur_start = i#
            cur_sum = vec[i]#
            #
            # alt sum so next element will be subtracted#
            add_or_sub = -1#
        } else {#
            cur_sum = tmp_sum#
            add_or_sub = add_or_sub * -1#
        }#
        #
        # Check if this sum is the new max#
        if (cur_sum > max_sum) {#
            max_sum = cur_sum#
            max_start = cur_start#
            max_end = i#
        }#
    }#
    #
    return(list(vec=vec, max=max_sum, start=max_start, end=max_end, subvec=vec[max_start:max_end]))#
}
find.maxsum(int.list2)
find.maxsum(int.list3)
working.problem1(int.list3)
library(bigmemory)
?big.matrix
?file.path
?basename
basename('/home/data/cor.nii.gz')
dirname('/home/data/cor.nii.gz')
?is.big.matrix
?gc
getOption("verbose")
gc(FALSE)
gc(TRUE)
t = gc(FALSE)
t
system.time(t = 2)
system.time(t <- 2)
t2 = system.time(t <- 2)
t
t2 = system.time(t3 <- 2)
t3
t2
exist("me")
exists("me")
?exists
file.exists("me")
?read.table
read.table("~/Documents/rtest.txt")
read.table("~/Documents/rtest.txt", header=F)
read.table("~/Documents/rtest.txt", header=F, col.names=F)
read.table("~/Documents/rtest.txt", header=F)
as.character(read.table("~/Documents/rtest.txt", header=F))
as.character(read.table("~/Documents/rtest.txt", header=F)[,1])
?continue
??continue
?break
??break
?while
??while
??for
?for
?
?me
?"for"
source("~/Dropbox/Code/r-nitools/connectivity.R")
pwd
pwd()
??pwd
?pwd
?is.dir
?dirname
?file.info
file.path("~/Dropbox")
file.info("~/Dropbox")
t = file.info("~/Dropbox")
t$isdir
file.info("~/Dropbox")$isdir
t
t2
cat(t2)
print(t2)
library(matrix)
library(Matrix)
?Matrix
Matrix(NA, 3, 3, sparse=F)
Matrix(NA, 3, 3, sparse=F, uplo="U")
(A <- cbind(a=c(2,1), b=1:2))# symmetric *apart* from dimnames
A
(A <- cbind(a=c(2,1), b=1:2))# symmetric *apart* from dimnames
Matrix(A)
Matrix(A, dimnames=list(NULL,NULL))
As = Matrix(A, dimnames=list(NULL,NULL))
As
Matrix(NA, 3, 3, sparse=F, dimnames=list(NULL,NULL))
tmp = Matrix(NA, 3, 3, sparse=F, dimnames=list(NULL,NULL))
tmp[1,2] =2
tmp
tmp[2,1] =2
tmp
?save
library(bigmemory)
?as.big.matrix
s
?as.big.matrix
# Read in data#
library(R.matlab)#
#
#
#
tmp.read1 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 240, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.read2 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 160, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.read3 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 280, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.read4 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 300, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.read5 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 150, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.read6 = function(fn) {#
    b = readMat(fn)$history[,,1]#
    tmp = b$trial[,,1]#
    btrial = matrix(NA, 320, 5)#
    colnames(btrial) = c("time", "isTarget", "isCorrect", "rxntime", "response")#
    btrial = as.data.frame(btrial)#
    btrial$isTarget = as.numeric(tmp$isTarget)#
    btrial$isCorrect = as.numeric(tmp$isCorrect)#
    btrial$rxntime = as.numeric(tmp$rxntime)#
    btrial$response = as.numeric(tmp$response)#
    tmp = b$timing[,,1]#
    btrial$time = as.numeric(tmp$startTrial)#
    #
    return(btrial)#
}#
#
tmp.info = function(btrial) {#
    # Tell Me Number of Trials#
    nTrials = length(btrial$isTarget)#
    cat("Number of Trials:", nTrials, "\n")#
#
    # Tell Me Number of No Targets#
    nNoTargets = sum(btrial$isTarget==0)#
    cat("Number of No Targets:", nNoTargets, "\n")#
#
    # Tell Me False Alarms#
    nFalseAlarms = sum(btrial$isCorrect[btrial$isTarget==0]==0)#
    perFalseAlarms = mean(btrial$isCorrect[btrial$isTarget==0]==0)#
    cat("Number of False Alarms:", nFalseAlarms, "\n")#
    cat("Percent of False Alarms:", perFalseAlarms, "\n")#
#
    # Tell Me No Responses#
    nNoResponse = sum(btrial$response==0)#
    cat("Number of No Responses:", nNoResponse, "\n")#
}#
#
tmp.filter = function(btrial) {#
    # Filter data#
    ## Only want those trial with targets#
    ## Exclude trials with no response#
    btrial[btrial$isTarget==0 | btrial$response==0,-1] = NA#
    #
    btrial$time = btrial$time - btrial$time[1]#
    #
    return(btrial)#
}#
#
# Go through isCorrect and find the number of runs with a given length#
tmp.runs = function(df, shuffle=F) {#
	df = na.exclude(df)#
	#
	df.time = df$time#
	df.correct = df$isCorrect#
	#
	if (shuffle)#
	    df.correct = sample(df.correct)#
	#
	n = nrow(df)#
    runlengths = c()#
#
    curType = df.correct[1]#
    startRun = df.time[1]#
    for (i in 2:n) {#
    	# New run#
    	if (df.correct[i] != df.correct[i-1]) {#
    	    # Save#
    	    runlengths = append(runlengths, df.time[i-1]-startRun)#
    	    # New#
    	    curType = df.correct[i]#
    	    startRun = df.time[i]#
    	# Start new run and save old#
    	} else if (i==n) {#
    	    curType = df.correct[i]#
    	    runlengths = append(runlengths, df.time[i]-startRun)#
    	}#
    }#
#
    return(runlengths)#
}#
#
tmp.perm.mean = function(df, perms=500) {#
    ref.mean = mean(tmp.runs(df))#
    mean.runs = vector("numeric", perms)#
    mean.runs[1] = ref.mean#
    for (i in 2:perms)#
        mean.runs[i] = mean(tmp.runs(df, T))#
    pval = sum(mean.runs>=ref.mean)/perms#
    return(pval)#
}#
#
tmp.perm.hist = function(df, perms=500, by.breaks=10) {#
    b = max(df$time, na.rm=T)^(1/(by.breaks-1))#
    hist.breaks = c(0, b)#
    for (i in 2:(by.breaks-1))#
        hist.breaks = append(hist.breaks, hist.breaks[i]*b)#
    hist.breaks[by.breaks] = max(df$time, na.rm=T)#
    n.breaks = length(hist.breaks)-1#
    #
    hist.runs = matrix(0, perms, n.breaks)#
    colnames(hist.runs) = round(hist.breaks[-1], 1)#
#
    ref.runlengths = tmp.runs(df)#
    x = hist(ref.runlengths, hist.breaks, plot=F)#
    hist.runs[1,] = x$counts#
#
    for (i in 2:perms) {#
        tmp.runlengths = tmp.runs(df, T)#
        x = hist(tmp.runlengths, hist.breaks, plot=F)#
        hist.runs[i,] = x$counts#
    }#
#
    tmp.p1 = function(vec) sum(vec>=vec[1])/length(vec)#
    tmp.p2 = function(vec) sum(vec<=vec[1])/length(vec)#
#
    pvals = apply(hist.runs, 2, tmp.p1)#
    pvals = rbind(pvals, apply(hist.runs, 2, tmp.p2))#
    rownames(pvals) = c("Data longer", "Data shorter")#
    #
    return(list(hr=hist.runs, pvals=pvals))#
}#
#
tmp.cv.run = function(df) {#
    tmp = tmp.runs(df)#
    mean(tmp)#
}#
#
tmp.cv.rt = function(df) {#
    rts = df$rxntime[df$rxntime!=0 & !is.na(df$rxntime)]#
    sd(rts)/mean(rts)#
}
setwd("~/Dropbox/Research/sponty/experiment/")
list.files()
setwd('../')
setwd("/Users/zarrar/Dropbox/Code/sponty2/experiment/data/slowvision/v6")
setwd("/Users/zarrar/Dropbox/Code/sponty2/experiment/data/slowvision3/v6")
startpoints = c(0, 160, 320)
btrial = tmp.filter(tmp.read6('s215.mat'))
btrial
tmp = btrial[1:160, c(1,3)]
tmp
tmp[c(1,160)]
tmp[c(1,160),1]
seq(0, 528, by=2)
?integrate
?deriv
?deriv3
